// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 *
 * 0 0 0
 * 0 0 1
 * 0 1 0
 * 0 1 1
 * 1 0 0
 * 1 0 1
 * 1 1 0
 * 1 1 1
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // use address to identify the register
    DMux8Way (in=true, sel=address, a=r0load, b=r1load, c=r2load, d=r3load, e=r4load, f=r5load, g=r6load, h=r7load);

    // should register 0 be loaded?
    And (a=r0load, b=load, out=load0);
    // if so, load it with input
    Register (in=in, load=load0, out=r0);

    And (a=r1load, b=load, out=load1);
    Register (in=in, load=load1, out=r1);

    And (a=r2load, b=load, out=load2);
    Register (in=in, load=load2, out=r2);

    And (a=r3load, b=load, out=load3);
    Register (in=in, load=load3, out=r3);

    And (a=r4load, b=load, out=load4);
    Register (in=in, load=load4, out=r4);

    And (a=r5load, b=load, out=load5);
    Register (in=in, load=load5, out=r5);

    And (a=r6load, b=load, out=load6);
    Register (in=in, load=load6, out=r6);

    And (a=r7load, b=load, out=load7);
    Register (in=in, load=load7, out=r7);

    // copy selected register to out
    Mux8Way16 (a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, sel=address, out=out);
}