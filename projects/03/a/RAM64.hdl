// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // 
    DMux8Way (in=true, sel=address[3..5], a=r80load, b=r81load, c=r82load, d=r83load, e=r84load, f=r85load, g=r86load, h=r87load);

    // should register 0 be loaded?
    And (a=r80load, b=load, out=load80);
    // if so, load it with input
    RAM8 (in=in, load=load80, address=address[0..2], out=r80);

    And (a=r81load, b=load, out=load81);
    RAM8 (in=in, load=load81, address=address[0..2], out=r81);

    And (a=r82load, b=load, out=load82);
    RAM8 (in=in, load=load82, address=address[0..2], out=r82);
    
    And (a=r83load, b=load, out=load83);
    RAM8 (in=in, load=load83, address=address[0..2], out=r83);
    
    And (a=r84load, b=load, out=load84);
    RAM8 (in=in, load=load84, address=address[0..2], out=r84);
    
    And (a=r85load, b=load, out=load85);
    RAM8 (in=in, load=load85, address=address[0..2], out=r85);
    
    And (a=r86load, b=load, out=load86);
    RAM8 (in=in, load=load86, address=address[0..2], out=r86);
    
    And (a=r87load, b=load, out=load87);
    RAM8 (in=in, load=load87, address=address[0..2], out=r87);

    // copy selected register to out
    Mux8Way16 (a=r80, b=r81, c=r82, d=r83, e=r84, f=r85, g=r86, h=r87, sel=address[3..5], out=out);
}